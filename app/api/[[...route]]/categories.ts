import { z } from "zod"
import { db } from "@/db/drizzle"
import { categories, insertCategorySchema } from "@/db/schema"
import { Hono } from "hono"
import { clerkMiddleware, getAuth } from "@hono/clerk-auth"
import { eq, inArray, and } from "drizzle-orm"
import { zValidator } from "@hono/zod-validator"
import { createId } from "@paralleldrive/cuid2"

// Routes must be chained to be generated by the RPC type.
// https://hono.dev/docs/guides/rpc#using-rpc-with-larger-applications
const app = new Hono()
  .get(
    "/", 
    clerkMiddleware(),
    async (c) => {
      const auth = getAuth(c)

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const data = await db
        .select({
          id: categories.id,
          name: categories.name
        })
        .from(categories)
        .where(eq(categories.userId, auth.userId))

      return c.json({data})
    })
  .get(
    "/:id",
    zValidator("param", z.object({
      id: z.string().optional(),
    })),
    clerkMiddleware(),
    async (c) => {
      const auth = getAuth(c)
      const { id } = c.req.valid("param")

      if (!id) {
        return c.json({error: "Missing id"}, 400)
      }

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const [data] = await db
      // .select automaticaly returns data.
      .select({
        id: categories.id,
        name: categories.name,
      })
      .from(categories)
      .where(
        and(
          eq(categories.userId, auth.userId),
          eq(categories.id, id)
        )
      )

      if (!data) {
        return c.json({error: "Not found"}, 404)
      }

      return c.json({data})
    }
  )
  .post(
    "/",
    clerkMiddleware(),
    // Get the schema created with createInsertSchema.
    // Only valid the name.
    zValidator("json", insertCategorySchema.pick({
      name: true
    })),
    async (c) => {
      const auth = getAuth(c)
      const values = c.req.valid("json")

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const [data] = await db.insert(categories).values({
        id: createId(),
        userId: auth.userId,
        ...values
      })
      // insert() don't return anything by default, so we need to
      // chain returning() to fill data.
      .returning()

      return c.json({ data })
    })
  .post(
    "/bulk-delete", 
    clerkMiddleware(),
    zValidator(
      "json",
      z.object({
        ids: z.array(z.string())
      })
    ),
    async (c) => {
      const auth = getAuth(c)
      const values = c.req.valid("json")

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const data = await db
        .delete(categories)
        .where(
          and(
            eq(categories.userId, auth.userId),
            inArray(categories.id, values.ids)
          )
        )
        .returning({
          id: categories.id
        })
      
        return c.json({data})
    }
  )
  .patch(
    "/:id",
    clerkMiddleware(),
    // Validate the id param
    zValidator(
      "param",
      z.object({
        id: z.string().optional(),
      })
    ),
    // Validate values
    zValidator(
      "json", 
      insertCategorySchema.pick({
      name: true
    })),
    async (c) => {
      const auth = getAuth(c)
      const { id } = c.req.valid("param")
      const values = c.req.valid("json")

      if (!id) {
        return c.json({error: "Missing id"}, 400)
      }

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const [data] = await db
        .update(categories)
        .set(values)
        .where(
          and(
            eq(categories.userId, auth.userId),
            eq(categories.id, id)
          )
        )
        // set does not automatically return results
        .returning()

      if (!data) {
        return c.json({error: "Not found"}, 404)
      }

      return c.json({ data })
    }
  )
  .delete(
    "/:id",
    clerkMiddleware(),
    // Validate the id param
    zValidator(
      "param",
      z.object({
        id: z.string().optional(),
      })
    ),
    async (c) => {
      const auth = getAuth(c)
      const { id } = c.req.valid("param")

      if (!id) {
        return c.json({error: "Missing id"}, 400)
      }

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const [data] = await db
        .delete(categories)
        .where(
          and(
            eq(categories.userId, auth.userId),
            eq(categories.id, id)
          )
        )
        // set does not automatically return results
        .returning({
          id: categories.id
        })

      if (!data) {
        return c.json({error: "Not found"}, 404)
      }

      return c.json({ data })
    }
  )


export default app