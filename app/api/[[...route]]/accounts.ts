import { db } from "@/db/drizzle"
import { accounts, insertAccountSchema } from "@/db/schema"
import { Hono } from "hono"
import { clerkMiddleware, getAuth } from "@hono/clerk-auth"
import { eq } from "drizzle-orm"
import { zValidator } from "@hono/zod-validator"
import { createId } from "@paralleldrive/cuid2"

// Routes must be chained to be generated by the RPC type.
// https://hono.dev/docs/guides/rpc#using-rpc-with-larger-applications
const app = new Hono()
  .get(
    "/", 
    clerkMiddleware(),
    async (c) => {
      const auth = getAuth(c)

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const data = await db
        .select({
          id: accounts.id,
          name: accounts.name
        })
        .from(accounts)
        .where(eq(accounts.userId, auth.userId))

      return c.json({data})
    })
  .post("/",
    clerkMiddleware(),
    // Get the schema created with createInsertSchema.
    // Only valid the name.
    zValidator("json", insertAccountSchema.pick({
      name: true
    })),
    async (c) => {
      const auth = getAuth(c)
      const values = c.req.valid("json")

      if (!auth?.userId) {
        return c.json({error: "Unauthorized"}, 401)
      }

      const [data] = await db.insert(accounts).values({
        id: createId(),
        userId: auth.userId,
        ...values
      })
      // insert() don't return anything by default, so we need to
      // chain returning() to fill data.
      .returning()

      return c.json({ data })
    }
  )

export default app